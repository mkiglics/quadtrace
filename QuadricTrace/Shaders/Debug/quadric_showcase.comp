#version 450

/*struct Ray
{
	vec3 P;
	float Tmin;
	vec3 V;
	float Tmax;
};

uniform ivec3 N;
uniform sampler3D eccentricity;
mat3 getRotation(vec3 normal);
float intersectQuadric(in vec3 p, in vec3 v, in float k);*/

vec3 quadricCalculateNormal(vec3 point, ivec3 quadricCoord)
{
	vec3 p = quadricCoord;

	//center of the quadric's cell
	ivec3 c = globalToTexel(p, N - ivec3(1));
	vec4 tex = texelFetch(eccentricity, c, 0);
	vec3 dir = tex.yzw;
	//parameter of the quadric
	float k = tex.x;
	
	return getRotation(dir) * quadricGetNormal(point, k);
}

vec3 quadricGetIntersectionParamters(Ray cameraRay, ivec3 quadricCoord)
{
	vec3 p = quadricCoord;

	//center of the quadric's cell
	ivec3 c = globalToTexel(p, N - ivec3(1));
	vec4 tex = texelFetch(eccentricity, c, 0);
	vec3 dir = tex.yzw;
	//parameter of the quadric
	float k = tex.x;
	
	mat3 rot = getRotation(dir);
	vec2 both = intersectQuadricBoth(rot * (cameraRay.P - p), rot * cameraRay.V, k);
	float correct = intersectQuadric(rot * (cameraRay.P - p), rot * cameraRay.V, k);
	//the parameter of the closest intersection point
	return vec3(both, correct);
}
