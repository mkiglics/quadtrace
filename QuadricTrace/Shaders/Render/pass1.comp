//?#version 450

//?#include "../Math/common.glsl"
//?#include "../SDF/SDFprimitives.glsl"
//?#include "../Math/distanceInterface.glsl"
//?#include "../SDF/SDFcommon.glsl"
//?#include "../Math/interface.glsl"
//?#include "../Math/quadric.glsl"
//?#include "../Tracing/enhanced_sphere_trace.glsl"
//?#include "../Tracing/quadric_trace.glsl"
//?#include "../Math/graphics.comp"

// defining work group size
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) restrict readonly uniform image3D inField;
layout(binding = 1) restrict writeonly uniform image2D outColor;
layout(binding = 2) restrict writeonly uniform image2D outDistance;

#ifndef PASS1_TRACING
#define PASS1_TRACING(ray, desc, inField) (quadricTrace(ray, desc, inField))
#endif

void main()
{
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	ivec2 resolution = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	RayCone raycone = Camera(pixel, resolution);
	SphereTraceDesc desc = SphereTraceDesc(0.001f, 64);

	TraceResult traceResult = PASS1_TRACING(raycone.ray, desc, inField);
	vec3 resultP = raycone.ray.P + raycone.ray.V * traceResult.T;

	storeDistanceField(outDistance, pixel, DistanceField(resultP, traceResult.T));

	vec3 norm = computeGradient2(resultP);
	vec3 col = shadePointLight(resultP, norm,
						Material(vec3(0.5, 0.5, 0.8), 0.1, 1.5, 0.7),
						PointLight(vec3(2, 4, 2), vec3(60))
					);

	imageStore(outColor, pixel, vec4(clamp(col, vec3(0), vec3(1)), 1));
}
