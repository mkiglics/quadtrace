//?#version 450

//?#include "../Math/common.glsl"
//?#include "../SDF/SDFprimitives.glsl"
//?#include "../SDF/SDFcommon.glsl"
//?#include "../Math/distanceInterface.glsl"
//?#include "../Math/interface.glsl"
//?#include "../Math/quadric.glsl"
//?#include "../Tracing/enhanced_sphere_trace.glsl"
//?#include "../Tracing/quadric_trace.glsl"
//?#include "../Math/graphics.comp"
//?#include "../Math/box.glsl"

// defining work group size
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) restrict readonly uniform image3D inField;
layout(rgba32f, binding = 1) restrict readonly uniform image2D inDistance;
layout(rgba32f, binding = 2) restrict uniform image2D outColor;

uniform ivec3 uIllustratedQuadricCood = ivec3(4, 0, 0);
const Material quadricMaterial = Material(vec3(1.0, 0.2, 0.2), 0.1, 1.1, 0.02);
const DirectionalLight quadricLight = DirectionalLight(vec3(-1, -1, -1), vec3(1.8));
const DirectionalLight quadricLight2 = DirectionalLight(vec3(1, 1, 1), vec3(1.2));

/*
*/
vec3 getQuadricColor(in RayCone cameraRay, in vec3 object_hit_pos) 
{
	// if the ray hits the box then simply return a constant color
	vec3 quadricPos = voxelToGlobal(uIllustratedQuadricCood, imageSize(inField));
	vec3 voxelSize = voxelWorldSize(imageSize(inField));
	vec3 retColor = vec3(0);
	if (doesHitParcel(cameraRay.ray.P, cameraRay.ray.V, quadricPos, voxelSize)) 
	{
		retColor += vec3(0.5f, 0.5f, 0);
	}

	QuadricField field = decodeQuadricField(imageLoad(inField, uIllustratedQuadricCood));

	// the 2 intersection points for the quadric and the camera ray
	vec2 intersectionTs = quadric_Intersect(cameraRay.ray.P, cameraRay.ray.V, quadricPos, field.normal, field.k);
	float closerT = min(intersectionTs.x, intersectionTs.y);
//	closerT = quadric_IntersectClosest(cameraRay.ray.P, cameraRay.ray.V, quadricPos, field.normal, field.k);
	float fartherT = max(intersectionTs.x, intersectionTs.y);

	bool quadricIntersected = closerT > 0 && !isinf(closerT);

	// mix color for quadric
	if (quadricIntersected) 
	{
		//retColor += vec3(0.5f, 0.0f, 0.0f);
		
		// where the quadric was hit by the camera ray
		vec3 quadricHitPos = cameraRay.ray.P + cameraRay.ray.V * closerT;

		// the above hit pos in the quadric's local space
		vec3 quadricNormal = -quadric_GetNormal(quadricHitPos, quadricPos, field.normal, field.k);
		// retColor += clamp(shadeDirectionalLight(quadricHitPos, quadricNormal, quadricMaterial, quadricLight), vec3(0), vec3(1));
		return quadricNormal;
		// retColor += clamp(shadeDirectionalLight(quadricHitPos, quadricNormal, quadricMaterial, quadricLight2), vec3(0), vec3(1));

		/*const vec3 inFrontOfQuadric = vec3(255, 0, 0) / 255.0;
		const vec3 insideQuadric = vec3(0, 255, 0) / 255.0;
		const vec3 behindQuadric = vec3(0, 0, 255) / 255.0;

		objectColor = (res.T < minQuadricT) ? inFrontOfQuadric :
				      (res.T < maxQuadricT) ? insideQuadric    : behindQuadric;*/
	}
	return clamp(retColor, vec3(0), vec3(1));
}

void main()
{
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	ivec2 resolution = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	RayCone raycone = Camera(pixel, resolution);
	
	DistanceField field = loadDistanceField(inDistance, pixel);

	vec3 quadricColor = getQuadricColor(raycone, field.hitPoint);
	vec3 previousColor = clamp(imageLoad(outColor, pixel).xyz, vec3(0), vec3(1));
	
	// imageStore(outColor, pixel, vec4(field.dist));
	imageStore(outColor, pixel, vec4(mix(previousColor, quadricColor, 0.3f), 1));
}
