#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

restrict writeonly uniform image2D frameData;

uniform int max_iter = 150;
const float MAX_DISTANCE = 10000;
const float EPSILON = 0.001;

uniform sampler3D eccentricity;
uniform sampler3D sdf_values;
uniform ivec3 N;

uniform float delta = 0.8;

uniform vec3 lightPos = vec3(50, 50, 50);

// 1 if debug quadric should be shown 0 if not
uniform int showQuadric = 0;
// Stores which quadric should be shown
uniform ivec3 showcaseQuadricCoord = ivec3(0);


float tanfov = tan(radians(45)/2);
uniform vec3 eye, at, up;
uniform vec2 windowSize;

uniform int error_test = 0;

TraceResult trace(in Ray r, in SphereTraceDesc params);
vec3 quadricGetIntersectionParamters(Ray cameraRay, ivec3 quadricCoord);
vec3 quadricCalculateNormal(vec3 point, ivec3 quadricCoord);

vec3 getNormal(vec3 p, vec3 dim) 
{
    return normalize(vec3(
        SDF(vec3(p.x + EPSILON, p.y, p.z)) - SDF(vec3(p.x - EPSILON, p.y, p.z)),
        SDF(vec3(p.x, p.y + EPSILON, p.z)) - SDF(vec3(p.x, p.y - EPSILON, p.z)),
        SDF(vec3(p.x, p.y, p.z  + EPSILON)) - SDF(vec3(p.x, p.y, p.z - EPSILON))
    ));
}

vec3 gradient(in ivec3 coords)
{
	return texelFetch(eccentricity, coords, 0).yzw;
//	float[8] vert;
//	float[6] c;
//	for (int x = 0; x < 2; ++x)
//	{
//		for (int y = 0; y < 2; ++y)
//		{
//			for (int z = 0; z < 2; ++z)
//			{
//				vert[x*4+y*2+z]=texelFetch(sdf_values, coords+ivec3(x,y,z), 0).r;
//			}
//		}
//	}
//	c[0] = (vert[0] + vert[1] + vert[2] + vert[3]);
//	c[1] = (vert[4] + vert[5] + vert[6] + vert[7]);
//	c[2] = (vert[0] + vert[1] + vert[4] + vert[5]);
//	c[3] = (vert[6] + vert[7] + vert[2] + vert[3]);
//	c[4] = (vert[0] + vert[4] + vert[2] + vert[6]);
//	c[5] = (vert[5] + vert[1] + vert[7] + vert[3]);
//
//
//	vec3 norm = vec3(c[0] - c[1], c[2] - c[3], c[4] - c[5]);
//	return length(norm) > EPSILON ? normalize(norm) : vec3(0, 1, 0);
}


vec3 lighting(in vec3 p)
{
	vec3 ambient = vec3(0.1, 0.1, 0.1);
	vec3 n = getNormal(p,N);
	vec3 toLight = -normalize(p - lightPos);
	vec3 diffuse = vec3(0.6, 0.6, 0.6) * clamp(dot(n, toLight), 0, 1);
	vec3 lightDir = p-lightPos;
	vec3 ref = normalize(reflect(lightDir, n));
	vec3 e = normalize(eye - p);
	vec3 specular = vec3(pow(clamp(dot(ref,e), 0, 1), 32));

	return ambient + diffuse + specular;
}

/*
 * Given a point on the quadric (in world space and not in local space) and the position of that quadric
 * it returns a fragment color according to the Blinn-Phong model.
 */
vec3 quadricLighting(in vec3 p, in ivec3 quadricPosition) 
{
	vec3 ambient = vec3(0.1, 0.1, 0.1);
	vec3 e = normalize(eye - p);
	vec3 n = quadricCalculateNormal(p - quadricPosition, quadricPosition);
	vec3 toLight = normalize(lightPos - p);
	vec3 diffuse = vec3(0.2, 1.0, 0.2) * clamp(dot(n, toLight), 0, 1);
	vec3 lightDir = p - lightPos;
	vec3 ref = normalize(reflect(lightDir, n));
	vec3 specular = vec3(pow(clamp(dot(ref, e), 0, 1), 32));

	return ambient + diffuse + specular;
}

Ray Camera(vec2 pix, vec3 eye, vec3 at, vec2 dim)
{    
	vec3 w = normalize(at-eye);
    vec3 u = normalize(cross(w,vec3(0,1,0)));
	vec3 v = cross(u,w);
    
    vec2 px = (pix*2.-1.)*1.*normalize(dim);
    
    return Ray(eye,							//P
               0.1,							//minT
               normalize(w+px.x*u+px.y*v),	//V
               MAX_DISTANCE);				//maxT
}

bool doesHitParcel(in Ray r, in ivec3 parcelPos)
{
	float tmin = (parcelPos.x     - r.P.x) / r.V.x; 
    float tmax = (parcelPos.x + 1 - r.P.x) / r.V.x; 
 
    if (tmin > tmax) 
	{
		float temp = tmin;
		tmin = tmax;
		tmax = temp;
	}
 
    float tymin = (parcelPos.y     - r.P.y) / r.V.y; 
    float tymax = (parcelPos.y + 1 - r.P.y) / r.V.y; 
 
    if (tymin > tymax) 
	{
		float temp = tymin;
		tymin = tymax;
		tymax = temp;
	}
 
    if ((tmin > tymax) || (tymin > tmax)) 
        return false; 
 
    if (tymin > tmin) 
        tmin = tymin; 
 
    if (tymax < tmax) 
        tmax = tymax; 
 
    float tzmin = (parcelPos.z     - r.P.z) / r.V.z; 
    float tzmax = (parcelPos.z + 1 - r.P.z) / r.V.z; 
 
    if (tzmin > tzmax) 
	{
		float temp = tzmin;
		tzmin = tzmax;
		tzmax = temp;
	}
 
    if ((tmin > tzmax) || (tzmin > tmax)) 
        return false; 
 
    if (tzmin > tmin) 
        tmin = tzmin; 
 
    if (tzmax < tmax) 
        tmax = tzmax; 
 
    return true; 
}

/*
 * Based on the camera ray and the trace result for that ray it returns the color the pixel takes.
 * That may consist of the quadricColor and the objectColor depending on how this function's output is used.
*/
void getQuadricAndObjectColor(in Ray cameraRay, in TraceResult res, out vec3 quadricColor, out vec3 objectColor) 
{
	// get intersection parameter with quadric
	vec3 quadricT12R = showQuadric == 0 ? vec3(-1) : quadricGetIntersectionParamters(cameraRay, showcaseQuadricCoord);
	
	bool quadricIntersected = quadricT12R.z > 0 && !isinf(quadricT12R.z);
	//quadricIntersected = quadricT12R.x > 0 && quadricT12R.y > 0 && (!isinf(quadricT12R.x) || !isinf(quadricT12R.y));

	// mix color for quadric
	if (quadricIntersected) 
	{
		float minQuadricT = min(quadricT12R.x, quadricT12R.y);
		float maxQuadricT = max(quadricT12R.x, quadricT12R.y);

		quadricColor = quadricLighting(cameraRay.P + cameraRay.V * quadricT12R.z, showcaseQuadricCoord);

		const vec3 inFrontOfQuadric = vec3(255, 0, 0) / 255.0;
		const vec3 insideQuadric = vec3(0, 255, 0) / 255.0;
		const vec3 behindQuadric = vec3(0, 0, 255) / 255.0;

		objectColor = (res.T < minQuadricT) ? inFrontOfQuadric :
				      (res.T < maxQuadricT) ? insideQuadric    : behindQuadric;
	} 
	else
	{
		quadricColor = vec3(0);
		objectColor = lighting(eye + cameraRay.V * res.T);
	}

	if (doesHitParcel(cameraRay, showcaseQuadricCoord)) 
	{
		quadricColor = mix(vec3(1, 1, 0), quadricColor, 0.5);
	}
}

void main()
{
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	Ray r = Camera(coords.xy / windowSize, eye, at, windowSize);

	TraceResult res = trace(r, SphereTraceDesc(EPSILON, max_iter));

	vec3 quadricColor, objectColor;
	getQuadricAndObjectColor(r, res, quadricColor, objectColor);

	if (error_test == 1)
	{
		if (bool(res.flags & 1)) {imageStore(frameData, coords, vec4(1, 0, 0, 1)); return;}
		imageStore(frameData, coords, vec4(res.T/r.Tmax, 0, 0, 1));
		return;
	}
	if (bool(res.flags & 1))		{imageStore(frameData, coords, vec4(quadricColor, 0)); return;}
	if (bool(res.flags & 4))		{imageStore(frameData, coords, vec4(1, 0, 0, 1)); return;}
	
	imageStore(frameData, coords, vec4(mix(objectColor, quadricColor, 0.5), 1));
}
